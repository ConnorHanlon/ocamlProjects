Name: Connor Hanlon
x500: hanlo047@umn.edu
ID: 4714515

foldr f [] v = v
foldr f (x::xs) v = f x (foldr f xs v)

foldl f v [] = v
foldl f v (x::xs) = foldl f (f v x) xs

and b1 b2 = if b1 then b2 else false

andl l= foldl and true l
andr l= foldr and l true


andl - CALL BY VALUE
  andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and true (false :: true :: true :: [])
= foldl and (and true false) (true :: true :: [])
= foldl and false (true :: true :: [])
= foldl and (and false true) (true :: [])
= foldl and false (true :: [])
= foldl and (and false true) ([])
= foldl and false ([])
= false


andl - CALL BY NAME
  andl (true :: false :: true :: true :: [])
= foldl and true (true :: false :: true :: true :: [])
= foldl and (and true true) (false :: true :: true :: [])
= foldl and true (false :: true :: true :: [])
= foldl and (and true false) (true :: true :: [])
= foldl and false (true :: true :: [])
= foldl and (and false true) (true :: [])
= foldl and false (true :: [])
= foldl and (and false true) ([])
= foldl and false ([])
= false

andr - CALL BY VALUE
  andr (true :: false :: true :: true :: [])
= foldr and (true :: false :: true :: true :: []) true
= and true (foldr and (false :: true :: true :: []) true))
= and true (and false (foldr and (true :: true :: []) true) )
= and true (and false (and true (foldr and (true :: []) true) ))
= and true (and false (and true (and true (foldr and [] true)) ))
= and true (and false (and true (and true true) ))
= and true (and false (and true true ))
= and true (and false true)
= and true false
= false


andr - CALL BY NAME
  andr (true :: false :: true :: true :: [])
= foldr and (true :: false :: true :: true :: []) true
= and true (foldr and (false :: true :: true :: []) true)
= foldr and (false :: true :: true :: []) true
= and false (foldr and (true :: true :: []) true)
= false

Which is better?
Of the four different evaluations, the andr with call by name is the most.
The function evaluation was short circuited so the entire function didn't need
to be evaluated, and the depth of the evaluation is significantly less than
the other three. Also, foldr as opposed to foldl allows for short circuiting
through lazy evaluation whereas foldl must fully evaluate without a stop condition.
